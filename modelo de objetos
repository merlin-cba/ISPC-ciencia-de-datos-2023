# -*- coding: utf-8 -*-

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf
from sklearn.linear_model import Ridge, LinearRegression, Lasso
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from skforecast.ForecasterAutoreg import ForecasterAutoreg
from skforecast.ForecasterAutoregCustom import ForecasterAutoregCustom
from skforecast.ForecasterAutoregDirect import ForecasterAutoregDirect
from skforecast.ForecasterAutoregMultiOutput import ForecasterAutoregMultiOutput
from skforecast.model_selection import grid_search_forecaster, backtesting_forecaster
from skforecast.utils import save_forecaster, load_forecaster
from typing import Tuple, Union, List


class DataProcessor:
    
    def __init__(self, data_file: str):
        self._data_file = data_file
        self._datos = None
        self._datos_train = None
        self._datos_val = None
        self._datos_test = None
    
    def load_data(self) -> None:
        self._datos = pd.read_csv(self._data_file)
    
    def transform_data(self) -> None:
        pass
    
    def split_data(self, start_date_train: str, end_date_train: str, 
                   end_date_validation: str) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
        self._datos = self._datos.loc[start_date_train:end_date_validation]
        self._datos_train = self._datos.loc[:end_date_train]
        self._datos_val = self._datos.loc[end_date_train:end_date_validation]
        self._datos_test = self._datos.loc[end_date_validation:]
        return self._datos_train, self._datos_val, self._datos_test
    
    
class ElectricityDemand(DataProcessor):
    
    def __init__(self, data_file: str):
        super().__init__(data_file)
    
    def transform_data(self) -> None:
        self._datos['Fecha'] = pd.to_datetime(self._datos['Fecha'])
        self._datos = self._datos.set_index('Fecha')
        self._datos = self._datos.asfreq('60min')
        self._datos = self._datos.sort_index()
    
    def plot_data(self) -> None:
        self.plot_data_helper(self._datos_train, self._datos_val, self._datos_test, 'Demanda elÃ©ctrica')
    
    def plot_data_zoom(self, start_date: str, end_date: str) -> None:
        zoom = (start_date, end_date)
        fig = plt.figure(figsize=(12, 6))
        grid = plt.GridSpec(nrows=8, ncols=1, hspace=0.6, wspace=0)

        main_ax = fig.add_subplot(grid[1:3, :])
        zoom_ax = fig.add_subplot(grid[5:, :])

        self.plot_data_zoom_helper(self._datos_train
